import { useRouter } from 'next/router';
import ParkingGrid from './trial'; // Import the modified ParkingGrid component
import { auth, db } from '@/components/firebase';
import { ref, push, onValue } from 'firebase/database';
import { useEffect, useState } from 'react';
import { useAuthState } from 'react-firebase-hooks/auth';
import Navbar from '@/components/navbar';
import Modal from 'react-modal'; // Import the react-modal library
import { FaStar, FaStarHalf } from 'react-icons/fa'; // Assuming you have imported these icons
import Link from 'next/link';

const Book = () => {
    const router = useRouter();
    const {
        address,
        name,
        email,
        pricePerHour,
        contactNumber,
        length,
        width,
    } = router.query;
    const [user] = useAuthState(auth);
    const [selectedSpotIndex, setSelectedSpotIndex] = useState(1); // Initialize with 1
    const [customerID, setCustomerID] = useState(null);


    // State for modal
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [rating, setRating] = useState(0);
    const [feedback, setFeedback] = useState('');

    const handleConfirmPayment = () => {
        const currentUser = auth.currentUser;
        if (!currentUser || selectedSpotIndex === null) {
            return;
        }

        // Generate a unique booking ID without special characters
        const bookingID = generateUniqueBookingID(name, email);

        const bookingDetails = {
            spotIndex: selectedSpotIndex,
            user: currentUser.email,
            name: currentUser.displayName,
            email,
            pricePerHour,
            address,
            contactNumber,
            length,
            width,
        };

        // Store the booking details under the generated booking ID
        const sanitizedBookingID = sanitizeStringForFirebaseKey(bookingID);
        const customerRef = ref(db, `${sanitizedBookingID}`);
        push(customerRef, bookingDetails)
            .then((newBookingRef) => {
                // Retrieve the unique key generated by Firebase
                const newBookingKey = newBookingRef.key;

                // Store the newBookingKey as the customer ID
                setCustomerID(newBookingKey);

                // Increment the selected spot index
                setSelectedSpotIndex(selectedSpotIndex + 1);

                // Display an alert
                window.alert('Payment confirmed successfully!');
                // Open the modal when payment is confirmed
                setIsModalOpen(true);
            })
            .catch((error) => {
                console.error('Error adding booking: ', error);
            });
    };

    // Function to generate a unique booking ID without special characters
    const generateUniqueBookingID = (a, b) => {
        let result = '';
        const maxLength = Math.max((a || '').length, (b || '').length);

        for (let i = 0; i < maxLength; i++) {
            if (i < (a || '').length) {
                const charA = a[i].replace(/[^\w\s]/gi, ''); // Remove special characters
                result += charA.replace(/\s/g, ''); // Remove spaces
            }
            if (i < (b || '').length) {
                const charB = b[i].replace(/[^\w\s]/gi, ''); // Remove special characters
                result += charB.replace(/\s/g, ''); // Remove spaces
            }
        }

        return result;
    };

    // Function to sanitize a string for use as a Firebase key
    const sanitizeStringForFirebaseKey = (str) => {
        return str.replace(/[$#\[\].]/g, '');
    };

    const fetchOrderHistory = () => {
        if (!customerID) {
            return;
        }

        // Define a reference to the customer's orders
        const ordersRef = ref(db, customerID);

        // Listen for changes to the orders
        onValue(ordersRef, (snapshot) => {
            const orderHistory = snapshot.val();
            // Do something with the orderHistory, e.g., display it or update the state
        });
    };

    useEffect(() => {
        fetchOrderHistory();
    }, [customerID]);

    if (!user) {

        return (
            <div className="min-h-screen bg-gray-100 font-bold text-gray-700 ml-12 text-4xl mx-auto flex items-center justify-center ">
                Please Login Before Accessing this page
                <Link href='/home' className="bg-gray-600 mx-auto hover:bg-yellow-700 text-white font-bold py-2 px-4 rounded-md" >
                    Home
                </Link>
            </div>

        );

    }
    return (
        <div className="bg-gray-100">
            <Navbar />
            <div className="max-w-2xl mx-auto py-8 mt-12">
                <div className="bg-white rounded-lg shadow-lg p-4">
                    <h2 className="text-xl font-bold text-black">{address}</h2>
                    <p className="text-gray-500">Owner: {name}</p>
                    <p className="text-gray-500">Email: {email}</p>
                    <p className="text-gray-500">Price per Hour: {pricePerHour}</p>
                    <p className="text-gray-500">Contact Number: {contactNumber}</p>
                </div>
                <div className="mt-4">
                    <button
                        onClick={handleConfirmPayment}
                        className="bg-blue-500 text-white px-4 py-2 rounded-md cursor-pointer"
                        disabled={selectedSpotIndex === null}
                    >
                        Confirm Payment
                    </button>
                    {/* <ParkingGrid landHeight={length} landWidth={width} slot={selectedSpotIndex} /> */}

                    {/* Modal */}
                    <Modal
                        isOpen={isModalOpen}
                        onRequestClose={() => setIsModalOpen(false)}
                        style={{
                            content: {
                                width: '40%',
                                height: '70%',
                                margin: 'auto',
                                overflow: 'auto',
                            },
                        }}
                    >
                        <div>
                            <h2 className="text-2xl font-semibold mb-4">Leave a Review</h2>
                            <div className="flex space-x-4">
                                {[...Array(5)].map((_, index) => {
                                    const currentRate = index + 1;
                                    const isHovered = currentRate <= rating;
                                    const isSelected = currentRate === rating;

                                    return (
                                        <label
                                            key={index}
                                            className="cursor-pointer"
                                            onMouseEnter={() => setRating(currentRate)}
                                            onMouseLeave={() => setRating(0)}
                                        >
                                            <input
                                                type="radio"
                                                name="rate"
                                                value={currentRate}
                                                style={{ display: 'none' }}
                                                onChange={() => setRating(currentRate)} // Update this line
                                            />
                                            {isSelected ? (
                                                <FaStar size={40} color="yellow" />
                                            ) : isHovered ? (
                                                currentRate - rating === -0.5 ? (
                                                    <FaStarHalf size={40} color="yellow" />
                                                ) : (
                                                    <FaStar size={40} color="yellow" />
                                                )
                                            ) : (
                                                <FaStar size={40} color="grey" />
                                            )}
                                        </label>
                                    );
                                })}
                            </div>
                            <textarea
                                className="w-full h-32 border p-2 mt-4"
                                placeholder="Leave your feedback here..."
                                onChange={(e) => setFeedback(e.target.value)}
                                value={feedback}
                            ></textarea>
                            <button
                                className="cursor-pointer px-3 py-2 border border-gray-700 rounded hover-bg-gray-700 hover:text-white transition-colors duration-300 mt-4"
                                onClick={() => {
                                    // Handle your review submission here, using the rating and feedback state values
                                    console.log('Rating:', rating);
                                    console.log('Feedback:', feedback);

                                    // Close the modal and reset the state
                                    setIsModalOpen(false);
                                    setRating(0);
                                    setFeedback('');
                                }}
                            >
                                Submit Review
                            </button>
                        </div>
                    </Modal>

                    {/* End of Modal */}
                </div>
            </div>
        </div>
    );
};

export default Book;
